{"version":3,"file":"static/js/335.b239b1c7.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","hooks/contactsHooks.js","webpack://react-homework-template/./src/pages/ContactsPage/ContactsPage.module.css?0a45","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"field\":\"ContactForm_field__DAXEv\",\"label\":\"ContactForm_label__-cVXI\",\"inputWrapper\":\"ContactForm_inputWrapper__9zhfJ\",\"input\":\"ContactForm_input__Bl93P\",\"formIcon\":\"ContactForm_formIcon__sp4GK\",\"btnForm\":\"ContactForm_btnForm__cx8-v\"};","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport { MdLocalPhone, MdOutlinePersonOutline } from 'react-icons/md';\n\nimport s from './ContactForm.module.css';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nfunction ContactForm() {\n  const contacts = useSelector(contactsSelectors.getItems);\n  const [form, setForm] = useState(INITIAL_STATE);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    setForm({\n      ...form,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const contactInList = contacts.find(({ name }) =>\n      name.toLocaleLowerCase().includes(form.name.toLocaleLowerCase())\n    );\n\n    contactInList\n      ? toast.warning(`${form.name} is already in your list`)\n      : dispatch(contactsOperations.addContacts(form));\n\n    setForm(INITIAL_STATE);\n  };\n\n  const { name, number } = form;\n\n  return (\n    <form className={s.form} autoComplete=\"off\" onSubmit={handleSubmit}>\n      <label className={s.field}>\n        <span className={s.label}>Name</span>\n        <span className={s.inputWrapper}>\n          <input\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <MdOutlinePersonOutline className={s.formIcon} />\n        </span>\n      </label>\n\n      <label className={s.field}>\n        <span className={s.label}>Number</span>\n        <span className={s.inputWrapper}>\n          <input\n            className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <MdLocalPhone className={s.formIcon} />\n        </span>\n      </label>\n\n      <button className={s.btnForm} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactItem\":\"ContactList_contactItem__ppNQ5\",\"btnList\":\"ContactList_btnList__NBygw\"};","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\nimport Loader from 'components/Loader/Loader';\nimport s from './ContactList.module.css';\n\nfunction ContactList() {\n  const loading = useSelector(contactsSelectors.getLoader);\n  const error = useSelector(contactsSelectors.getError);\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(contactsSelectors.getVisibleContacts);\n\n  const onDeleteContacts = id =>\n    dispatch(contactsOperations.deleteContacts(id));\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {error && <p>{error.message}</p>}\n      {visibleContacts.length > 0 && (\n        <ul className={s.contactList}>\n          {visibleContacts.map(({ id, name, number }) => (\n            <li key={id} className={s.contactItem}>\n              <span>{name} : </span>\n              <span>{number}</span>\n              <button\n                className={s.btnList}\n                type=\"button\"\n                onClick={() => onDeleteContacts(id)}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"field\":\"Filter_field__IlYZE\",\"label\":\"Filter_label__vEd1E\",\"inputWrapper\":\"Filter_inputWrapper__-FNL8\",\"input\":\"Filter_input__N7T3z\",\"formIcon\":\"Filter_formIcon__gFW30\"};","import { useFilter } from 'hooks/contactsHooks';\nimport { MdSearch } from 'react-icons/md';\nimport s from './Filter.module.css';\n\nfunction Filter() {\n  const { value, filterContacts } = useFilter();\n  return (\n    <label className={s.field}>\n      <span className={s.inputWrapper}>\n        <input\n          className={s.input}\n          type=\"text\"\n          value={value}\n          placeholder=\"Find contacts by name\"\n          onChange={e => filterContacts(e.currentTarget.value)}\n        />\n        <MdSearch className={s.formIcon} />\n      </span>\n    </label>\n  );\n}\n\nexport default Filter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/contacts/contacts-selectors';\nimport { filterContacts } from 'redux/contacts/contacts-actions';\n\nexport const useFilter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onFilterContacts = value => dispatch(filterContacts(value));\n\n  return {\n    value,\n    filterContacts: onFilterContacts,\n  };\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"phonebookSection\":\"ContactsPage_phonebookSection__MVjyj\",\"formContainer\":\"ContactsPage_formContainer__45v1B\",\"title\":\"ContactsPage_title__P3MkR\",\"contactsContainer\":\"ContactsPage_contactsContainer__w3PtD\"};","import { ToastContainer, Flip } from 'react-toastify';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport 'react-toastify/dist/ReactToastify.css';\nimport s from './ContactsPage.module.css';\n\nfunction ContactsPage() {\n  return (\n    <section className={s.phonebookSection}>\n      <div className={s.formContainer}>\n        <ToastContainer autoClose={2000} transition={Flip} />\n        <h1 className={s.title}>Phonebook </h1>\n        <ContactForm />\n      </div>\n      <div className={s.contactsContainer}>\n        <h2 className={s.title}>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    </section>\n  );\n}\n\nexport default ContactsPage;\n"],"names":["INITIAL_STATE","name","number","contacts","useSelector","contactsSelectors","useState","form","setForm","dispatch","useDispatch","handleChange","e","currentTarget","value","className","s","autoComplete","onSubmit","preventDefault","find","toLocaleLowerCase","includes","toast","contactsOperations","type","onChange","pattern","title","required","loading","error","visibleContacts","useEffect","Loader","message","length","map","id","onClick","onDeleteContacts","getFilter","filterContacts","useFilter","placeholder","autoClose","transition","Flip"],"sourceRoot":""}